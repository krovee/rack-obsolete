
   ######                          #######                               
   #     #   ##    ####  #    #    #       #    #  ####  # #    # ###### 
   #     #  #  #  #    # #   #     #       ##   # #    # # ##   # #      
   ######  #    # #      ####      #####   # #  # #      # # #  # #####  
   #   #   ###### #      #  #      #       #  # # #  ### # #  # # #      
   #    #  #    # #    # #   #     #       #   ## #    # # #   ## #      
   #     # #    #  ####  #    #    ####### #    #  ####  # #    # ###### 
                                                                      
###########################################################################
###########################################################################
###########################################################################

ChangeLog starts from initial commit (12/10/23)

+ [12/10/23 :: 1]:  Congratulation! Today is the birthday of my game engine! 
                    And plans are so wide! For example, my goals are to make
                    PBR materials by default in-engine, GI lighting, semi-RT
                    reflections, cool water simulation, post-processing efx,
                    integration of Bullet physics library, OpenAL audio, net
                    stack (tcp+udp), rich file IO, full control over memory 
                    consumption, integrated scripting language (i.e. python)
                    
+ [12/10/23 :: 2]:	Starting with Windows-only solution based on 
					Visual Studio Solution. Project's split into 
					'RackEngine' & '3rd-party' solution directories. A first 
					one contains engine-related code (engine library + 
					executable). Second one responsible on any other software 
					used by engine side (i.e.> libffmpeg, openal, etc..)

+ [12/11/23 :: 3]:	Started memory subsystem with simple stack_memory_provider 
					for small stack-based memory allocations; fixed_heap_memory_provider 
					for large but fixed by size memory allocations; all derived 
					from 'basic_memory_provider' interface. Done basic memory manager 
					for simple centralized interface to allocate a memory!
					
+ [12/13/23 :: 4]:	So implemented a couple of things to form a core's bare bones 
					and define a structure of engine's startup process. Created small 
					minimal mathmatecal vector classes in MVectors.h; Also done some 
					refactoring on source code directory structure: now /Sources/ 
					subdirectory mirrors /Include/'s directory structure to not confuse 
					where to put/look for a specitic source file, corresponding to 
					certain header. Extra: enabled AVX2 instructions on project's 
					settings (which made simd a requirement for the engine).
					
+ [12/14/23 :: 5]:	Added a couple of extensions to vec<4> in order to access elements 
					by smaller vector sizes. Also tweaked class adt::flags_view to accept 
					default value in constructor and check flag value with equals operator (==). 
					And low_level::oac and low_level::oad classes were tweaked and fixed too, 
					now they're works only on pointers (which are nullptred by default).
					
+ [12/14/23 :: 6]:	"Now engine have a window class! But it's too far.." What am I talking about? 
					There's a list of tons of features and classes and tech that should (and *MUST*) 
					be added before very first engine's window will be created and displayed. 
					So that, the class re::desktop_window will not be used for a quite some time 
					in order to create proper foundation beforehand and expand codebase to provide 
					maybe a better desktop window solution. Code is tested and works well as expected, 
					but won't be used for some time. 
					
+ [12/14/23 :: 7]:	Now 'Dev' and 'Optimize' builds lives in a separate directories 
					'Binaries-Dev' and 'Binaries-Optimize' as is. 
					This is done to organize this libraries-mess 
					in 'Binaries' directory when multiple targets built.
					
+ [12/16/23 :: 8]:	So, as far as I understand scale this project will grow soon, it would be 
					nice and clean to have a straight plan on what-should-be-implemented. So, 
					also its good to mention that this list will expand as project grows.

+ [MM/DD/YY :: N]:	...
